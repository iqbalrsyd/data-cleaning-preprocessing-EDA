# -*- coding: utf-8 -*-
"""Iqbal_Data Preprocessing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14LlSLMXRPOkRCyxiXNq2R7VsxmG2A9PD
"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import display
import glob
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler, LabelEncoder
from mpl_toolkits.mplot3d import Axes3D

! pip install kaggle

from google.colab import drive
drive.mount('/content/drive')

! mkdir ~./kaggle

!cp /content/drive/MyDrive/kaggle.json ~/.kaggle/kaggle.json

! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets download -d oleksiimartusiuk/e-commerce-data-shein

! unzip e-commerce-data-shein.zip -d /content/e-commerce-data-shein

file_directories = []

for file in os.listdir('/content/e-commerce-data-shein'):
  print('/content/e-commerce-data-shein', file, sep='/')
  file_directories.append(file)

file_names = []
category_names = []

for directory in file_directories:
    split_directory = directory.split('-')
    file_names.append((split_directory[2] + '-' + split_directory[3]))
    category_names.append(split_directory[2])

data_folder = '/content/e-commerce-data-shein'

file_names = [file for file in os.listdir(data_folder) if file.endswith('.csv')]

df_names = []

for file in file_names:
    file_path = f'{data_folder}/{file}'

    category = file.replace('us-shein-', '').replace('.csv', '').split('-')[0]

    try:
        df = pd.read_csv(file_path)
        df_name = f'{category}'
        globals()[df_name] = df
        df_names.append(df_name)
        print(f'Successfully loaded {df_name}')
    except FileNotFoundError:
        print(f'File {file_path} not found. Please check the path or file name.')
    except pd.errors.EmptyDataError:
        print(f'File {file_path} is empty. Skipping this file.')
    except Exception as e:
        print(f'An error occurred while loading {file_path}: {e}')

categories = [
    "beauty_and_health", "curve", "sports_and_outdoors", "electronics",
    "appliances", "shoes", "jewelry_and_accessories", "toys_and_games",
    "home_textile", "swimwear", "underwear_and_sleepwear",
    "office_and_school_supplies", "home_and_kitchen", "automotive",
    "kids", "bags_and_luggage", "mens_clothes", "tools_and_home_improvement",
    "womens_clothing", "pet_supplies", "baby_and_maternity"
]

file_paths = glob.glob('/content/e-commerce-data-shein/*.csv')

all_columns = set()

dataframes = []

for i, file_path in enumerate(file_paths):
    df = pd.read_csv(file_path)

    df['category'] = categories[i]

    all_columns.update(df.columns)

    dataframes.append(df)

all_columns = list(all_columns)

dfs = [df.reindex(columns=all_columns) for df in dataframes]

df = pd.concat(dfs, ignore_index=True)

display(df)

df.shape

print(df.columns)

columns_to_drop = ['blackfridaybelts-bg src', 'goods-title-link', 'goods-title-link--jump href', 'goods-title-link--jump', 'product-locatelabels-img src']
df.drop(columns=columns_to_drop, inplace=True)

print(df.info())
display(df.isnull().sum())

print(df.isnull().mean() * 100)

df.info()

df = df.dropna(subset=['price'])

for column in df.columns:
    value_counts_df = df[column].value_counts(dropna=False).reset_index()
    value_counts_df.columns = [column, 'Count']
    print(f"Value counts for column: {column}")
    display(value_counts_df)
    print("\n")

df['color-count'] = df['color-count'].fillna(0)

df['selling_proposition'] = df['selling_proposition'].replace(r'[\s\+]*sold recently', '', regex=True)
df['selling_proposition'] = df['selling_proposition'].fillna(0)

df['discount'] = df['discount'].str.replace('-', '').str.replace('%', '')

df['blackfridaybelts-content'] = df['blackfridaybelts-content'].str.extract(r'\$(\d+\.\d+)')
df['blackfridaybelts-content'] = df['blackfridaybelts-content'].fillna('0')

df['price'] = df['price'].replace('[\$,]', '', regex=True).astype(float).fillna(0)
df['discount'] = df['discount'].replace(r'%', '', regex=True).astype(float).fillna(0)
df['rank-sub'] = df['rank-sub'].fillna('0')

df['selling_proposition'] = df['selling_proposition'].fillna('0')

import re

def extract_rank(text):
    match = re.search(r'#(\d+)', str(text))
    return int(match.group(1)) if match else 0

df['rank-title'] = df['rank-title'].apply(extract_rank)

def parse_numbers(value):
    if pd.isna(value):
        return 0
    value = str(value).lower().replace(',', '')
    if 'k' in value:
        return float(value.replace('k', '')) * 1000
    elif 'm' in value:
        return float(value.replace('m', '')) * 1000000
    else:
        try:
            return float(value)
        except ValueError:
            return 0

df['selling_proposition'] = df['selling_proposition'].apply(parse_numbers)

display(df.dtypes)
display(df.isnull().sum())
display(df)

df['color-count'] = df['color-count'].astype(float)
df['selling_proposition'] = df['selling_proposition'].astype(float)
df['blackfridaybelts-content'] = df['blackfridaybelts-content'].astype(float)
df['rank-title'] = df['rank-title'].astype('category')
df['rank-sub'] = df['rank-sub'].astype('category')
df['rank-title'] = df['rank-title'].astype('category')
df['category'] = df['category'].astype('category')

for column in df.columns:
    value_counts_df = df[column].value_counts(dropna=False).reset_index()
    value_counts_df.columns = [column, 'Count']
    print(f"Value counts for column: {column}")
    display(value_counts_df)
    print("\n")

z_scores = np.abs((df[['color-count', 'price', 'discount', 'blackfridaybelts-content','selling_proposition']] - df[['color-count', 'price', 'discount', 'blackfridaybelts-content','selling_proposition']].mean()) / df[['color-count', 'price', 'discount', 'blackfridaybelts-content','selling_proposition']].std())
df_cleaned = df[(z_scores < 3).all(axis=1)]

df_cleaned.info()

plt.figure(figsize=(12, 10))
correlation_matrix = df_cleaned[['color-count', 'price', 'discount', 'blackfridaybelts-content','selling_proposition']].corr()
mask = np.triu(np.ones_like(correlation_matrix, dtype=bool))
sns.heatmap(correlation_matrix, mask=mask, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix')
plt.show()

covariance_matrix = df_cleaned[['color-count', 'price', 'discount', 'blackfridaybelts-content','selling_proposition']].cov()
plt.figure(figsize=(12, 10))
mask = np.triu(np.ones_like(correlation_matrix, dtype=bool))
sns.heatmap(covariance_matrix, mask=mask, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Covariance Matrix')
plt.show()

scaler = StandardScaler()
scaled_data = scaler.fit_transform(df_cleaned[['color-count', 'price', 'discount', 'blackfridaybelts-content','selling_proposition']])

pca = PCA(n_components=3)
pca_result = pca.fit_transform(scaled_data)

explained_variance = pca.explained_variance_ratio_
print("Explained variance ratio:", explained_variance)

components = pca.components_
print("PCA components:\n", components)

le = LabelEncoder()

category_encoded = le.fit_transform(df_cleaned['category'])

colors = plt.cm.tab20(np.linspace(0, 1, len(le.classes_)))

fig = plt.figure(figsize=(15, 12))
ax = fig.add_subplot(111, projection='3d')

for i, category in enumerate(le.classes_):
    mask = category_encoded == i
    ax.scatter(pca_result[mask, 0], pca_result[mask, 1], pca_result[mask, 2],
               c=[colors[i]], label=category, alpha=0.7, s=10)

ax.set_xlabel('Principal Component 1')
ax.set_ylabel('Principal Component 2')
ax.set_zlabel('Principal Component 3')
ax.set_title('3D PCA Results by Category')

ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)

plt.tight_layout()
plt.show()

rank_title_encoded = le.fit_transform(df_cleaned['rank-title'])

colors = plt.cm.tab20(np.linspace(0, 1, len(le.classes_)))

fig = plt.figure(figsize=(15, 12))
ax = fig.add_subplot(111, projection='3d')

for i, category in enumerate(le.classes_):
    mask = rank_title_encoded == i
    ax.scatter(pca_result[mask, 0], pca_result[mask, 1], pca_result[mask, 2],
               c=[colors[i]], label=category, alpha=0.7, s=1)

ax.set_xlabel('Principal Component 1')
ax.set_ylabel('Principal Component 2')
ax.set_zlabel('Principal Component 3')
ax.set_title('3D PCA Results by Rank Title')

ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)

plt.tight_layout()
plt.show()

rank_title_encoded = le.fit_transform(df_cleaned['rank-title'])

mask_non_zero = df_cleaned['rank-title'] != 0
rank_title_encoded_filtered = rank_title_encoded[mask_non_zero]
pca_result_filtered = pca_result[mask_non_zero]

unique_rank_titles_filtered = np.unique(rank_title_encoded_filtered)
colors = plt.cm.tab20(np.linspace(0, 1, len(unique_rank_titles_filtered)))

fig = plt.figure(figsize=(15, 12))
ax = fig.add_subplot(111, projection='3d')

for i, category in enumerate(unique_rank_titles_filtered):
    mask = rank_title_encoded_filtered == i
    ax.scatter(pca_result_filtered[mask, 0], pca_result_filtered[mask, 1], pca_result_filtered[mask, 2],
               c=[colors[i]], label=category, alpha=0.7, s=8)

ax.set_xlabel('Principal Component 1')
ax.set_ylabel('Principal Component 2')
ax.set_zlabel('Principal Component 3')
ax.set_title('3D PCA Results by Rank Title (Excluding 0)')

ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)

plt.tight_layout()
plt.show()

scaler = StandardScaler()
scaled_data = scaler.fit_transform(df_cleaned[['color-count', 'price', 'discount', 'blackfridaybelts-content','selling_proposition']])

pca = PCA(n_components=2)
pca_result = pca.fit_transform(scaled_data)

explained_variance = pca.explained_variance_ratio_
print("Explained variance ratio:", explained_variance)

components = pca.components_
print("PCA components:\n", components)

plt.figure(figsize=(10, 8))
sns.scatterplot(x=pca_result[:, 0], y=pca_result[:, 1], hue=df_cleaned['category'], palette='tab10', alpha=0.7, s=4)
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('PCA Result with Hue by Category')
plt.legend(title='Category')
plt.show()

plt.figure(figsize=(10, 8))
sns.scatterplot(x=pca_result[:, 0], y=pca_result[:, 1], hue=df_cleaned['rank-title'], palette='tab10', alpha=0.7, s=4)
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('PCA Result with Hue by Rank Title')
plt.legend(title='Rank Title')
plt.show()

mask_non_zero = df_cleaned['rank-title'] != 0
pca_result_filtered = pca_result[mask_non_zero]
df_cleaned_filtered = df_cleaned[mask_non_zero]

plt.figure(figsize=(10, 8))
sns.scatterplot(x=pca_result_filtered[:, 0], y=pca_result_filtered[:, 1],
                hue=df_cleaned_filtered['rank-title'], palette='tab10', alpha=0.7, s=8)

plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('PCA Result with Hue by Rank Title (Excluding 0)')

plt.legend(title='Rank Title')
plt.show()
